# Import data
import pandas as pd
df = pd.read_excel("GSE17048.xlsx")

# Define inputs and outputs
import numpy as np
X = df.iloc[0:143, [0, 1, 4, 9, 13, 15, 18, 20, 21, 22, 24, 25, 27, 28, 29, 31, 33, 40, 41, 42, 47, 48, 51, 52, 53, 
                    57, 58, 59, 60, 66, 68, 70, 71, 72, 73]].values # 35 selected features
y = df.iloc[0:143, 74].values
y = np.where(y == 'healthy', 0, 1)

# Split data (80% training, 20% testing)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)

# Standardize data
from sklearn.preprocessing import StandardScaler
scale = StandardScaler()
X_train_std = scale.fit_transform(X_train)
X_test_std = scale.transform(X_test)

# Train conventional classifiers and compute predictions and some performance metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, log_loss
from time import time
tic = time()
kn = KNeighborsClassifier()
kn.fit(X_train_std, y_train)
y_pred_kn = kn.predict(X_test_std)
confmat = confusion_matrix(y_test, y_pred_kn)
accuracy = accuracy_score(y_test, y_pred_kn)
cross_entropy = log_loss(y_test, y_pred_kn)
toc = time()
print(confmat)
print("acc: ", accuracy, "Log loss: ", cross_entropy)
print(f"Done in {toc - tic:.3f}s")

from sklearn.naive_bayes import GaussianNB
tic = time()
gnb = GaussianNB()
gnb.fit(X_train_std, y_train)
y_pred_gnb = gnb.predict(X_test_std)
confmat = confusion_matrix(y_test, y_pred_gnb)
accuracy = accuracy_score(y_test, y_pred_gnb)
cross_entropy = log_loss(y_test, y_pred_gnb)
toc = time()
print(confmat)
print("acc: ", accuracy, "Log loss: ", cross_entropy)
print(f"Done in {toc - tic:.3f}s")

from sklearn.svm import SVC
tic = time()
svm = SVC()
svm.fit(X_train_std, y_train)
y_pred_svm = svm.predict(X_test_std)
confmat = confusion_matrix(y_test, y_pred_svm)
accuracy = accuracy_score(y_test, y_pred_svm)
cross_entropy = log_loss(y_test, y_pred_svm)
toc = time()
print(confmat)
print("acc: ", accuracy, "Log loss: ", cross_entropy)
print(f"Done in {toc - tic:.3f}s")

from sklearn.tree import DecisionTreeClassifier
tic = time()
dt = DecisionTreeClassifier()
dt.fit(X_train_std, y_train)
y_pred_dt = dt.predict(X_test_std)
confmat = confusion_matrix(y_test, y_pred_dt)
accuracy = accuracy_score(y_test, y_pred_dt)
cross_entropy = log_loss(y_test, y_pred_dt)
toc = time()
print(confmat)
print("acc: ", accuracy, "Log loss: ", cross_entropy)
print(f"Done in {toc - tic:.3f}s")

# Train and compile the proposed ANN models
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras import regularizers

# A single hidden layer ANN
ann_1 = Sequential()
ann_1.add(Dense(106, activation='tanh',  kernel_initializer='normal', input_shape=(35,), 
                kernel_regularizer=regularizers.l2(l=0.01)))
ann_1.add(Dropout(0.1))
ann_1.add(Dense(1, activation='sigmoid'))
ann_1.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
hist_1 = ann_1.fit(X_train_std, y_train,
                batch_size=32, epochs=15,
                validation_data=(X_test_std, y_test))
ann_1.evaluate(X_test_std, y_test)
y_pred_ann_1 = ann_1.predict(X_test_std)
# converting values
y_pred_ann_1 = (y_pred_ann_1 > 0.5)
confmat = confusion_matrix(y_test, y_pred_ann_1)
print(confmat)
accuracy = accuracy_score(y_test, y_pred_ann_1)
print("acc: ", accuracy)

# Two hidden layers ANN
ann_2 = Sequential()
ann_2.add(Dense(53, activation='tanh',  kernel_initializer='normal', input_shape=(35,), 
                kernel_regularizer=regularizers.l2(l=0.01)))
ann_2.add(Dropout(0.1))
# Add second hidden layer
ann_2.add(Dense(53, activation='tanh', kernel_regularizer=regularizers.l2(l=0.01)))
ann_2.add(Dropout(0.1))
ann_2.add(Dense(1, activation='sigmoid'))
ann_2.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
hist_2 = ann_2.fit(X_train_std, y_train,
                batch_size=32, epochs=15,
                validation_data=(X_test_std, y_test))
ann_2.evaluate(X_test_std, y_test)
y_pred_ann_2 = ann_2.predict(X_test_std)
# converting values
y_pred_ann_2 = (y_pred_ann_2 > 0.5)
confmat = confusion_matrix(y_test, y_pred_ann_2)
print(confmat)
accuracy = accuracy_score(y_test, y_pred_ann_2)
print("acc: ", accuracy)
                



