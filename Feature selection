# Import data
import pandas as pd
df = pd.read_excel("GSE17048.xlsx")
features = ['HLA-DRB1', 'CXCR4', 'ITGAM', 'ACTB', 'RHOA', 'RPS27A', 'UBA52', 'RPL8', 'RPS25', 'S100A8', 'EIF3E', 
            'NFKBIA', 'TNFAIP3', 'EIF4G1', 'DEDD2', 'YWHAB', 'S100A9', 'SERPINA1', 'YBX1', 'RHOG', 'VIM', 'RAC2', 'HBB',
            'CCR2', 'HBG2', 'RPL36AL', 'CD99', 'CRKL', 'HBG1', 'CD69', 'NFKBIZ', 'DDIT4', 'NAMPT', 'CCDC59', 'SNRPA1',
            'IFI44L', 'LOC401206', 'C5AR1', 'CWC15', 'ΝΑΕ1', 'RGS2', 'LOC642210', 'MYCBP2', 'NDUFA4', 'STAG2', 'JUNB',
            'METTL5', 'LOC388720', 'NKG7', 'CORO1A', 'PSAP', 'ZNF217', 'KLF2', 'LYZ', 'GNLY', 'ATP6V1B2', 'ADRB2', 
            'ICAM3', 'CHSY1', 'YWHAG', 'EFHD2', 'LASP1', 'S100A4', 'MYADM', 'GZMH', 'SLC25A39', 'RNF149', 'PCBP1', 
            'FGFBP2', 'CSDA', 'KLF13', 'GPR56', 'NCOA4', 'ELF4']
feature_names = np.array(features)

# Define inputs and outputs
X = df.iloc[0:143, 0:74].values
y = df.iloc[0:143, 75].values
y = np.where(y == 'healthy', 0, 1)

# Split data (80% training, 20% testing)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, stratify=y)

# Standardize data
from sklearn.preprocessing import StandardScaler
scale = StandardScaler()
X_train_std = scale.fit_transform(X_train)
X_test_std = scale.transform(X_test)

# Feature selection
from sklearn.feature_selection import RFECV
from sklearn.model_selection import StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train_std, y_train)
importances = rf.feature_importances_
indices = np.argsort(importances)[::-1]
cv = StratifiedKFold(5)
rfecv = RFECV(
    estimator=rf,
    step=1,
    cv=cv,
    scoring="accuracy",
    min_features_to_select=1,    # Minimum number of features to consider
    n_jobs=-1,
)
rfecv.fit(X_train_std, y_train)
print(f"Optimal number of features: {rfecv.n_features_}")
X_selected = rfecv.transform(X_train_std)
for f in range(X_selected.shape[1]):
    print("%2d) %-*s %f" % (f + 1, 30, 
                            feature_names[indices[f]], 
                            importances[indices[f]]))
